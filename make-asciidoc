#!/usr/bin/env bash
set -o pipefail

default_format=pdf
with_hyphen=1
DEBUG=0
ECHO=
_c_v() {
    [[ -z "$1" ]] && { echo -n no; return 0; } \
        || (($1 <= 0)) && echo -n no || echo -n yes
}
_help() {
    cat<<EOH
Usage: ${0##*/} [OPTIONS] [--] <input.adoc>
Options:
    -h|--help               this message
    -e|--env <env>          environment: dev, rc, prod
    -t|--template <file>    render only the specified file
    -s|--style <file>       use the provided style file
    -f|--format <format>    output format (default: $default_format)
    -H|--with-hyphenation   enable hyphenation (default: $(_c_v $with_hyphen))
    -Z|--no-hyphenation     disable hyphenation
    -o|--out <name>         output file
    -E|--no-embedded-images don't embed images in html file
    -T|--force-toc          html only - force TOC
    --level                 try to guess title at which the excerpt is starting
    --headers <file>        specify a header file to include
    --footers <file>        specify a footer file to include
    --common <file>         specify a common file to include
    --biblio <file>         specify a biblio file to include
    --lexicon <file>        specify a lexicon file to include
    --appendix <file>       specify an appendix file to include
    --notes <file>          specify a notes file to include (only visible in dev env)
    --debug                 print debug traces
    --debug2                print (more) debug traces
EOH
}

tmpl=
mktmp() {
    local t=$(mktemp -u)
    tmpl=.$(basename "$t")
}

post_treatment=()
adjust_level=0
with_template=
has_biblio=
has_common=
has_lexicon=
has_appendix=
has_notes=
has_style=
output_file=
embed_images=1
output_format=
force_toc=
formats=()
EOO=0
ARGS=()
OPTS=()
add_format() {
    [[ -z "$1" ]] && return 1
    for ((i=0;i<${#formats[@]};++i)); do
        [[ "${formats[$i]}" == $1 ]] && return 0; done
    formats+=( "$1" )
}
while (($#)); do
    s=0; ks=0
    OPTS+=( "$1" )
    if ((EOO)); then
        ARGS+=( "$1" )
        shift
        continue
    fi
    case "$1" in
        --) EOO=1;;
        -h|--help) _help; exit 0;;
        --level) adjust_level=1;;
        -e|--env) ENV=$2; ks=1;;
        -t|--template) with_template=1;;
        -s|--style) has_style="$2"; ks=1;;
        -S|--css-style) has_css_style="${2%.css}.css"; ks=1;;
        -f|--format) s=1; add_format "$2"; shift;;
        -H|--with-hyphenation) with_hyphen=1;;
        -Z|--no-hyphenation) unset with_hyphen;;
        -o|--out) output_file="$2"; ks=1;;
        -E|--embed-images) unset embed_images;;
        -T|--force-toc) force_toc=1;;
        --headers) has_headers="$2"; ks=1;;
        --footers) has_footers="$2"; ks=1;;
        --common) has_common="$2"; ks=1;;
        --biblio) has_biblio="$2"; ks=1;;
        --lexicon) has_lexicon="$2"; ks=1;;
        --appendix) has_appendix="$2"; ks=1;;
        --notes) has_notes="$2"; ks=1;;
        --debug) DEBUG=1;;
        --debug[0-9]*) DEBUG=${1#--debug};;
        -B|--background) s=1; bg_format=1;;
        *) ARGS+=( "$1" );;
    esac
    ((s)) && unset OPTS[$((${#OPTS[@]}-1))]
    ((ks)) && shift && OPTS+=( "$1" )
    shift
done

output_format="${formats[0]}"
output_format=${output_format:-$default_format}
set -- "${ARGS[@]}"

## multiple formats at once
mformat=${#formats[@]}
if ((mformat>1)); then
    set -- "${OPTS[@]}"
    declare -A res
    failed=0
    for ((i=0;i<mformat;++i)); do
        fmt=${formats[$i]}
        if ((nbg_fmt)); then
            $0 -f $fmt "$@" &
        else
            $0 -f $fmt "$@"
            ((bg_format)) && {
                bg_format=0
                nbg_fmt=1
            }
        fi
        r=$?
        res[$fmt]=$r
        ((r)) && failed=1
    done
    exit $failed
fi

((DEBUG>1)) && set -x

#version=${version:-v0.0.draft.$(date +"%d-%m-%Y.%H:%M:%S.%Z")};;
ENV=${ENV:-prod}

if [[ -z "$version" ]]; then
case "$ENV" in
    dev) version="v0.0.draft.$(date +"%d-%m-%Y.%H:%M:%S.%Z")"; dev=1;;
    rc*) version="v0.9-${ENV^^}";;
    prod) version="v1.0";;
    *) version="ukn";;
esac
fi

matches=
find_file() {
    local raw
    [[ "$1" == -r ]] && raw=1 && shift
    local reg
    ((raw)) && reg="$1" || reg=".*/[0-9iIvVxXcC]*[.]*${1}\.adoc"
    ((DEBUG)) && echo "reg: $reg (raw: $raw)" >&2
    local files
    files=( "$(find . -maxdepth 1 -type f -regextype egrep -regex "${reg}" -not -size 0)" )
    declare -A m
    matches=()
    for f in ${files[@]}; do
        r="$(readlink -f "$f")"
        [[ -n "${m["$r"]}" ]] && continue
        m["$f"]="$f"
        inod=$(\stat -c"%i" "$f")
        [[ -n "${m[$inod]}" ]] && continue
        m[$inod]="$f"
        matches+=( "$f" )
    done
    local max=${#matches[@]}
    ((max>1)) && echo "Warning: many matching possibilities found for common." && return 1
    echo "${matches[@]}"
}

## set output format specific options
case $output_format in
    pdf)
        config_dir=$HOME/.config/asciidoctor-pdf
        cmd=asciidoctor-pdf
        [[ -d /config/asciidoctor-pdf ]] \
            && data_dir=/config/asciidoctor-pdf \
            || data_dir=$HOME/.config/asciidoctor-pdf
        [[ -d "$data_dir/themes" ]] && styles_dir="$data_dir/themes"
        [[ -d "$data_dir/fonts" ]] && fonts_dir="$data_dir/fonts"
        ;;
    doc)
        output_format=docx
        ;&
    docx|odt)
        config_dir=$HOME/.config/asciidoctor
        ARGS=( "$@" )
        eval "input_file=\$$#"
        ofile=${input_file%.*}.${output_format}
        output_file=${output_file:-$ofile}
        mktmp; html="$tmpl"
        make-asciidoc -Z -f html -o "$html" ${ENV:+-a "env=${ENV}@"} "$input_file" 
        r=$?
        ((r)) && { \rm -f "$html"; exit $r; }
        pandoc -s "$html" -f html+tex_math_dollars+smart -t $output_format -o "$output_file"
        r=$?
        \rm -f "$html"
        exit $r
        ;;
    html-notoc|html-jive)
        output_format=html
        no_toc=1
        ;&
    html)
        ((force_toc)) && unset no_toc || no_toc=1
        post_treatment+=( jive )
        ;&
    *)
        config_dir=$HOME/.config/asciidoctor
        cmd=asciidoctor
        eval "input_file=\$$#"
        ofile=${input_file%.*}.${output_format}
        output_file=${output_file:-$ofile}

        #ARGS=( "$@" )
        #eval "input_file=\$$#"
        #ofile=${input_file%.*}.html
        #output_file=${output_file:-$ofile}
        #mktmp; html="$tmpl"
        ##cat "$input_file" | sed -e 's/^\ *<<<\ */---/g' > "$html"
        #cat "$input_file" > "$html"
        #input_file="$html"

        #ARGS[$((${#ARGS[@]}-1))]=""
        #set -- "$html" "${ARGS[@]}"
        #clean_input=1
esac

## look for commonly included files
# common
#commons=$(find . -maxdepth 1 -type f -regextype sed -regex ".*/[0-9]*[.]*[Cc][Oo][Mm][Mm][Oo][Nn][^.]*\.adoc" -not -size 0)
if [[ -z "$has_common" ]]; then
    has_common=$(find_file "[Cc][Oo][Mm][Mm][UuOo][Nn]")
fi
if [[ -z "$has_lexicon" ]]; then
    has_lexicon=$(find_file "[Ll][Ee][Xx][Ii]([Cc][Oo][Nn]|[Qq][Uu][Ee])")
fi
if [[ -z "$has_biblio" ]]; then
    has_biblio=$(find_file "[Bb][Ii][Bb][Ll][Ii][Oo][^.]*")
fi
if [[ -z "$has_appendix" ]]; then
    has_appendix=$(find_file "[Aa]([Pp][Pp][Ee][Nn][Dd][Ii][XxCc]|[Nn][Nn][Ee][Xx])[Ee]*[Ss]*")
fi
if [[ -z "$has_notes" ]]; then
    has_notes=$(find_file "([Nn][Oo][Tt][Ee]|[Tt][Oo][Dd][Oo])[Ss]*")
fi
if [[ -z "$has_headers" ]]; then
    has_headers=$(find_file "[Hh][Ee][Aa][Dd][Ee][Rr][Ss]")
fi
if [[ -z "$has_footers" ]]; then
    has_footers=$(find_file "[Ff][Oo][Oo][Tt][Ee][Rr][Ss]")
fi
if [[ -z "$has_style" ]]; then
    has_style=$(find_file -r ".*/.+[-]theme[.]yml$")
    if [[ -n "$has_style" ]]; then
        has_style=${has_style##*/}
        has_style=${has_style%-*}
        styles_dir=.
    else
        if [[ -d "$config_dir/themes" ]]; then
            styles_dir="$config_dir/themes"
        fi
    fi
else
    styles_dir=$(readlink -f `dirname "${has_style}"`)
    has_style=${has_style##*/}; has_style=${has_style%-}
fi
if [[ -z "$has_css_style" ]]; then
    has_css_style=$(find_file -r ".*/.+[-]theme[.]css$")
    if [[ -n "$has_css_style" ]]; then
        has_css_style=${has_css_style##*/}
        css_styles_dir=.
    else
        if [[ -d "$config_dir/stylesheets" ]]; then
            css_styles_dir="$config_dir/stylesheets"
        fi
    fi
else
    [[ -f "${has_css_style}" ]] \
        && css_styles_dir=$(readlink -f `dirname "${has_css_style}"`) \
        || [[ -f "$config_dir/stylesheets/$has_css_style" ]] && css_styles_dir="$config_dir/stylesheets"
    has_css_style=${has_css_style##*/};
fi

if [[ -d "$config_dir/fonts" ]]; then
    fonts_dir="$config_dir/fonts"
fi

if ((DEBUG)); then
ECHO="echo would run:"
echo "ENV: $ENV"
echo "common: $has_common"
echo "lexicon: $has_lexicon"
echo "biblio: $has_biblio"
echo "appendix: $has_appendix"
echo "notes: $has_notes"
echo "headers: $has_headers"
echo "footers: $has_footers"
echo "style: $has_style ($styles_dir)"
echo "css style: $has_css_style ($css_styles_dir)"
echo "fonts dir: $fonts_dir"
echo "version: $version"
echo "has notes: $has_notes"
echo "output format: $output_format"
echo "output file: $output_file"
fi

## compile excerpt
if [[ -n "$with_template" ]]; then
    #mktmp; set -- "-o" "${with_template%.*}.pdf" "$tmpl"
    #ofile=${with_template%.*}.pdf
    eval "input_file=\$$#"
    ofile=${input_file%.*}.${output_format}
    output_file=${output_file:-$ofile}
    mktmp; set -- "$tmpl"
    cat <<'EOT' >> "$tmpl"
:notitle:
ifeval::[{env} == "dev"]
:dev: 1
endif::[]
ifndef::version[]
ifdef::dev[]
v0.0, {localdatetime}: draft
endif::dev[]
ifndef::dev[]
v0.9-RC1
endif::dev[]
endif::version[]
ifndef::no_toc[]
:toc:
endif::no_toc[]
:doctype: article
:experimental: true
:source-highlighter: rouge
:listing-caption: Listing
ifdef::has_style[]
:pdf-stylesdir: {styles_dir}
:pdf-style: {has_style}
endif::has_style[]
ifndef::has_style[]
:pdf-style: my
endif::has_style[]
ifdef::has_css_style[]
:stylesdir: {css_styles_dir}
:stylesheet: {has_css_style}
endif::has_css_style[]
ifndef::has_css_style[]
:stylesheet: my-theme.css
endif::has_css_style[]

:pdf-page-size: A4
:icons: font
:icon-set: fa
:sectnums:
:sectnumlevels: 2
:lang: fr
:sectnums!:

ifdef::dev[]
:version: {revnumber}.{revremark}.{revdate}
endif::dev[]

[.test-right]
[.xsmall.gray]#_``{version}``_#

ifdef::has_common[]
include::{has_common}[]
endif::has_common[]
EOT
    echo >> "$tmpl"
    if ((adjust_level)); then
        if lev=$(grep -ohm1 '^\([=]\+\)\ ' $with_template); then
            lev=$(( ${#lev} -1 -1)); ((lev<0)) && lev=0
            imax=1
            while ((lev)); do
                ((++imax))
                for ((i=0;i<imax;++i)); do
                    echo -n "=" >> "$tmpl"
                done
                echo " {nbsp}" >> "$tmpl"
                ((--lev))
            done
        fi
    fi
    echo "include::${with_template}[]" >> "$tmpl"
fi

## compile
log=$($ECHO ${cmd} \
    -r asciidoctor-diagram ${ENV:+-a env=$ENV@} ${styles_dir:+-a pdf-stylesdir="${styles_dir}@"} ${fonts_dir:+-a pdf-fontsdir="${fonts_dir}@"} \
        -a version=${version}@ ${with_template:+ -q} \
        ${has_biblio:+-a has_biblio="$has_biblio"} ${has_appendix:+-a has_appendix="$has_appendix"} ${has_notes:+-a has_notes="$has_notes"} ${has_common:+-a has_common="$has_common"} ${has_lexicon:+-a has_lexicon="$has_lexicon"} ${has_headers:+-a has_headers="$has_headers"} ${has_footers:+-a has_footers="$has_footers"} ${has_style:+-a has_style="$has_style"} ${styles_dir:+-a styles_dir="$styles_dir"} ${has_css_style:+-a has_css_style="$has_css_style"} ${css_styles_dir:+-a css_styles_dir="$css_styles_dir"} ${with_hyphen:+-r hyphenation} ${embed_images:+-a data-uri} ${no_toc:+-a no_toc} \
        -b ${output_format} ${output_file:+-o $output_file} "$@" 2>&1 | grep -E -v '[0-9]: warning: (previous|already)')
r=$?
((DEBUG)) && {
    echo $log
    echo "(aborting due to DEBUG mode)"
    exit 0
}
((r)) && [[ -z "$log" ]] && r=0
((r)) && echo "$log"


## post treatments
# page break to horizontal rule
pb2hr() {
    sed -i 's,<div style="page-break-after: always;"></div>,<hr />,g' "$output_file"
}

footnotes() {
    local oldIFS=$IFS
    local IFS=$'\n'
    local buffer=()
    local local_buffer=(); 
    local cnt=0; local pos_match=0; local match=0; local pdo=0; local pdc=0
    for l in $(cat "$output_file"); do
        if ((match)); then
            dbg "within block"
            wdo=$(echo "$l"|grep -o '<div'|wc -l)
            wdc=$(echo "$l"|grep -o '</div'|wc -l)
            ((cnt+=wdo)); ((cnt-=wdc))

            dbg "cnt: $cnt, wdo: $wdo, wdc: $wdc"

            ## end of block
            if ((cnt<=0)); then
                dbg "END OF BLOCK"
                for b in ${local_buffer[@]}; do
                    buffer+=( "$b" )
                done
                buffer+=( "$l" )
                match=0
                pos_match=0
                local_buffer=()
                pdc=0; pdo=0
            else
                dbg "found a par to modify"
                pdo+=$(echo "$l"|grep -o '<p>'|wc -l)
                l=$(echo "$l" | sed -e 's,<p>,<p style="font-size: x-small; font-family: monospace;">,g')
                if ((pdo)); then
                    pdc+=$(echo "$l"|grep -o '</div'|wc -l)
                    ((pdo-pdc<=0)) && p_closed=1 && pdo=0 && pdc=0
                fi
                local_buffer+=( "$l" )
            fi
        elif [[ "$l" =~ \<div[^\>]+class=[\"\']([^\"\']*)\ *fn\ *[^\"\']* ]]; then
            dbg "that's a possible match"
            match=1
            ((++cnt))
            l=$(echo "$l" | sed -e "s,class=\([\"']\)\([^\"']*\)\ *fn\ *\([^\"']*\)\([\"']\)\(.*\)$)\",class=\1\2\3\4 style=\"\"\5,g" )
            local_buffer+=( "$l" )
        else
            buffer+=( "$l" )
        fi
    done
    for l in ${buffer[@]}; do
        echo "$l"
    done
    IFS=$oldIFS
}
footnotes_cur() {
    sed -i 's,class="\([^"]\+\)\ *fn\ *\([^"]*\)",class="\1 \2" style="font-size: x-small; font-family: monospace;",g' "$output_file"
    return 0
    # FIXME: only works for 1st note, should replace within whole <div></div> block though
    sed -i '/class="\([^"]\+\)\ *fn\ *\([^"]*\)"/{ N; s,class="\([^"]\+\)\ *fn\ *\([^"]*\)"\([^<]\+\)<p>,class="\1 \2"\3<p style="font-size: x-small; font-family: monospace";>,g }' "$output_file"
}
nostyle() {
    sed -i '/<style>/,/<\/style>/d' "$output_file"
}
## Post treatments... Shouldn't exist, really. Should be asciidoctor extensions.
m=${#post_treatment[@]}
for ((i=0;i<m;++i)); do
    case $post_treatment in
        jive)
            nostyle
            pb2hr
            footnotes
            ;;
        pb2hr) pb2hr;;
    esac
done

#((clean_input)) && [[ -n "$input_file" ]] && \rm -f "$input_file"
\rm -f "$tmpl"
exit $r
