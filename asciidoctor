#!/usr/bin/env bash
((DEBUG>2)) && set -x
__as_lib=${__as_lib:-0}

((DEBUG)) && {
_dbg() {
    echo "$@" >&2
    return 0
}
}||{
_dbg(){
    return 0
}
}

asciidoctor=
config_dir="$HOME/.config/asciidoctor"
config="$config_dir/config"
exts=( "$config_dir/extensions" )

[[ -d "$config_dir/common" ]] && common="$config_dir/common"

declare -A commons
get_common_libs() {
    if [[ -d "$common" ]]; then
        for f in "$common"/*.adoc; do
            if [[ -r "$f" ]]; then
                n=${f##*/}; n=${n%.adoc}; n=has_common_${n// /_}
                _dbg "adding common lib: $n ($f)" >&2
                commons["$n"]="$f"
            fi
        done
    fi
}
required=()

load_config() {
    ! [[ -r "$config" ]] && return 1

    ## get default executable
    asciidoctor=$(source "$config"; echo "$bin";)
    ## get custom sources for extensions
    local _exts=( $(source "$config"; for e in ${exts[@]}; do echo "$e"; done;) )
    for e in ${_exts[@]}; do
        _dbg "extra extension dir: $e"
        exts+=( "$e" )
    done
    ## get desired extenstions
    local _required=( $(source "$config"; for e in ${required[@]}; do echo "$e"; done;) )
    for e in ${_required[@]}; do
        _dbg "extra extension: $e"
        required+=( "$e" )
    done

    [[ -z "$asciidoctor" ]] && return 1
    return 0
}
find_exe() {
    [[ "$1" == -q ]] && shift && __quiet=1
    [[ -n "$asciidoctor" ]] && return 0
    load_config && return 0

    if [[ -z "$asciidoctor" ]]; then
        local name=${1:-asciidoctor}
        me=$(readlink -f "$0")
        for x in $(which -a "$name"|sort -u); do
            x=$(readlink -f "$x")
            if [[ "$x" != $me ]]; then
                asciidoctor="$x"
                break
            fi
        done
    fi
    [[ -z "$asciidoctor" ]] && return 1
    return 0
}
! find_exe && echo "ERROR: asciidoctor not found in PATH." && exit 1

# if extensions aren't required, just execute the real asciidoctor
!((__as_lib)) && [[ -z "${required[@]}" ]] && { exec "$asciidoctor" "$@"; exit 1; }

ARGS=()
## look for extension in custom paths
lib=
get_ext() {
    lib=
    local _e=$1; e=${_e%.rb}
    for ext in ${exts[@]}; do
        _dbg "ext dir: $ext"
        ! [[ -d "$ext" ]] && _dbg "dir not found: $ext" && continue
        lib=$(readlink -f "$ext/$e.rb")
        [[ -f "$lib" ]] && break
        if [[ -f "$ext/$e/$e.rb" ]]; then
            lib="$ext/$e/$e.rb"; break
        elif [[ -f "$ext/lib/$e.rb" ]]; then
            lib="$ext/lib/$e.rb"; break
        fi
    done
    _dbg "-> extension found: '$lib'"
    ! [[ -f "$lib" ]] && lib=$_e
    _dbg "-> extension retained: '$lib'"
}

check_required() {
    local r
    declare -A r
    ## remove duplicates
    for e in ${required[@]}; do
        r[$e]=1
    done
    required=()
    for e in ${!r[@]}; do
        required+=( "$e" )
    done

    for r in ${required[@]}; do
        _dbg "adding requirement: $r"
        get_ext "$r"
        ARGS+=( "-r" "$lib" )
    done
}
parse_args() {
    local OPTS=()
    while (($#)); do
        _dbg "a: $1"
        case $1 in
            --ext)
                shift
                [[ -d "$1" ]] && exts+=( "$1" )
                ;;
            -r|--require)
                shift
                required+=( "$1" )
                ;;
            -c|--common)
                shift
                common="$2"
                ;;
            *) OPTS+=( "$1" );;
        esac
        shift
    done
    check_required
    for a in "${OPTS[@]}"; do
        ARGS+=( "$a" )
    done

    if [[ -n "$common" && -d "$common" ]]; then
        ARGS+=( "-a" "common=${common}@" )
        get_common_libs
        for k in ${!commons[@]}; do
            ARGS+=( "-a" "$k=${commons["$k"]}@" )
        done
    fi
}

((__as_lib)) && return

parse_args "$@"
set -- "${ARGS[@]}"
((DEBUG>1)) && exec echo "$asciidoctor" "$@"
exec "$asciidoctor" "$@"
